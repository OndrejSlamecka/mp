//
// Copyright (c) 2022 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <boost/mp.hpp>
#include <bit>

#if defined(METABENCH)
template <auto List>
auto first_or_last_size = List | [](boost::mp::concepts::meta auto types) {
    return std::array{
        types[0].size > types[types.size() - 1].size - 1 ?
        boost::mp::meta{.index = 0} :
        boost::mp::meta{.index = types.size()-1}
    };
};

static_assert(1 ==
  first_or_last_size<boost::mp::type_list<
  <% (0..n-1).each do |i| %>
  <%= n % 2 == 0 ? 'std::byte[' + i.to_s + ']' : 'std::byte<' + (n-i).to_s + '>' %>
  <%= ',' if i < n-1 %>
  <% end %>
>{}>.size);
#endif

int main() {}
