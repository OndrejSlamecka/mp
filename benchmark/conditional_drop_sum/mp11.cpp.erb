#include <algorithm>
#include <boost/mp11/algorithm.hpp>

#if defined(METABENCH)
template<class... Ts>
constexpr auto sum(boost::mp11::mp_list<Ts...>) {
  return (Ts{} + ...);
}

template<auto N>
struct div_by{
  template<class T>
    using fn = boost::mp11::mp_bool<T{} / N == 0>;
};

template<class T>
constexpr auto conditional_drop_sum = sum(boost::mp11::mp_unique<
  boost::mp11::mp_if<boost::mp11::mp_any_of<T, div_by<7>::template fn>,
    boost::mp11::mp_take_c<T, boost::mp11::mp_size<T>{} - 2>,  boost::mp11::mp_int<0>>>{});

static_assert(<%= (0..n-2).sum %> ==
  conditional_drop_sum<boost::mp11::mp_list<
  <% (0..n-1).each do |i| %>
  std::integral_constant<std::size_t, <%= i %>>,
  std::integral_constant<std::size_t, <%= i %>>
  <%= ',' if i < n-1 %>
  <% end %>
>>);
#endif

int main() {}
