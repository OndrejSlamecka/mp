//
// Copyright (c) 2022 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <boost/mp11/algorithm.hpp>

#if defined(METABENCH)
template<class T, class U> using sizeof_less = boost::mp11::mp_bool<(sizeof(T) < sizeof(U))>;

template<class T>
using sort_unique_reverse_t = boost::mp11::mp_reverse<boost::mp11::mp_unique<boost::mp11::mp_sort<T, sizeof_less>>>;

static_assert(<%= n %> ==
  boost::mp11::mp_size<sort_unique_reverse_t<boost::mp11::mp_list<
  <% (0..n-1).each do |i| %>
  std::integral_constant<std::size_t, <%= i %>>
  <%= ',' if i < n-1 %>
  <% end %>
>>>{});
#endif

int main() {}
