//
// Copyright (c) 2022 Kris Jusiak (kris at jusiak dot net)
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <boost/mp11/algorithm.hpp>
#include <utility>

#if defined(METABENCH)
template<class T> using add_pointer_t =
    typename std::add_pointer<T>::type;

template<class T>
using has_value = std::bool_constant<requires(T t) { t->value; }>;

template <class T>
using transform_filter_t = boost::mp11::mp_filter<has_value, boost::mp11::mp_transform<add_pointer_t, T>>;

template <auto>
struct bar {};
template <auto>
struct foo {
  int value;
};

static_assert(<%= 1 + n / 2 %> ==
  boost::mp11::mp_size<transform_filter_t<boost::mp11::mp_list<
  <% (0..n-1).each do |i| %>
  <%= i % 2 == 0 ? 'foo<' + i.to_s + '>' : 'bar<' + i.to_s + '>' %>
  <%= ',' if i < n-1 %>
  <% end %>
>>>{});
#endif

int main() {}

